---
openapi: 3.0.3
info:
  title: onecx-iam-bff
  description: Backend-For-Frontend (BFF) service for onecx-iam. This API provides endpoints to perform operation on the Identity Management System
  version: 1.0.0
servers:
  - url: "http://onecx-iam-bff:8080"
tags:
  - name: userInternal
    description: Managing the requesting users IDM account.
  - name: adminInternal
    description: Managing IDM Users and Roles as and Admin.
paths:
  /admin/users/search:
    post:
      x-onecx:
        permissions:
          user:
            - admin-read
      tags:
        - adminInternal
      description: Search for users by criteria
      operationId: searchUsersByCriteria
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSearchCriteria'
      responses:
        200:
          description: User search results retrieved successfully
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserPageResult"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /admin/users:
    post:
      x-onecx:
        permissions:
          user:
            - admin-write
      tags:
        - adminInternal
      description: Create an new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        201:
          description: User created successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /admin/users/{userId}:
    put:
      x-onecx:
        permissions:
          user:
            - admin-write
      tags:
        - adminInternal
      description: Update an user by its id
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          description: Keycloak userId
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        204:
          description: User updated successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /admin/{userId}/roles:
    post:
      x-onecx:
        permissions:
          role:
            - admin-read
      tags:
        - adminInternal
      description: Get all roles of an user by its id
      operationId: getUserRoles
      parameters:
        - name: userId
          in: path
          required: true
          description: Keycloak userId
          schema:
            type: string
      requestBody:
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/SearchUserRolesRequest'
      responses:
        200:
          description: Role retrieved successfully
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/UserRolesResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /admin/{userId}/roles/assign:
    post:
      x-onecx:
        permissions:
          role:
            - admin-write
      tags:
        - adminInternal
      description: Assign a list of roles to an user by its id
      operationId: assignUserRole
      parameters:
        - name: userId
          in: path
          required: true
          description: Keycloak userId
          schema:
            type: string
      requestBody:
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/RoleAssignmentRequest'
      responses:
        204:
          description: User updated successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /admin/roles/search:
    post:
      x-onecx:
        permissions:
          role:
            - admin-read
      tags:
        - adminInternal
      description: Search for roles by criteria
      operationId: searchRolesByCriteria
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleSearchCriteria'
      responses:
        200:
          description: Role search results retrieved successfully
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/RolePageResult"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /admin/roles:
    post:
      x-onecx:
        permissions:
          role:
            - admin-read
      tags:
        - adminInternal
      description: Create a new role
      operationId: createRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
      responses:
        201:
          description: Role created successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /admin/providers:
    get:
      x-onecx:
        permissions:
          provider:
            - admin-read
      tags:
        - adminInternal
      description: Get all registered providers
      operationId: getAllProviders
      responses:
        200:
          description: Providers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvidersResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /me/password:
    put:
      x-onecx:
        permissions:
          password:
            - write
      tags:
        - userInternal
      description: Reset the password of the requesting user
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResetPasswordRequest'
      responses:
        204:
          description: Password resetted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /me/provider:
    get:
      x-onecx:
        permissions:
          provider:
            - read
      tags:
        - userInternal
      description: Get the provider of the requesting user
      operationId: getUserProvider
      responses:
        200:
          description: Provider retrieved successfully
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/ProvidersResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
components:
  schemas:
    SearchUserRolesRequest:
      type: object
      required:
        - issuer
      properties:
        issuer:
          type: string
    ProvidersResponse:
      type: object
      properties:
        providers:
          type: array
          items:
            $ref: '#/components/schemas/Provider'
    Provider:
      type: object
      properties:
        name:
          type: string
        displayName:
          type: string
        description:
          type: string
        fromToken:
          type: boolean
        domains:
          type: array
          items:
            $ref: '#/components/schemas/Domain'
    Domain:
      type: object
      properties:
        name:
          type: string
        displayName:
          type: string
        issuer:
          type: string
    UserRolesResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    UserSearchCriteria:
      type: object
      required:
        - issuer
      properties:
        userName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        userId:
          type: string
        email:
          type: string
        issuer:
          type: string
        pageNumber:
          format: int32
          description: The number of page.
          default: 0
          type: integer
        pageSize:
          format: int32
          description: The size of page
          default: 100
          maximum: 1000
          type: integer
    UserPageResult:
      type: object
      properties:
        totalElements:
          format: int64
          description: The total elements in the resource.
          type: integer
        number:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        totalPages:
          format: int64
          type: integer
        stream:
          type: array
          items:
            $ref: '#/components/schemas/User'
    CreateRoleRequest:
      type: object
      required:
        - issuer
        - name
      properties:
        issuer:
          type: string
        name:
          type: string
        description:
          type: string
    RoleAssignmentRequest:
      type: object
      required:
        - issuer
        - name
      properties:
        issuer:
          type: string
        names:
          type: array
          items:
            type: string
    CreateUserRequest:
      type: object
      required:
        - issuer
        - username
        - firstName
        - lastName
        - email
        - temporaryPassword
      properties:
        issuer:
          type: string
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        temporaryPassword:
          type: string
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    UpdateUserRequest:
      type: object
      required:
        - issuer
      properties:
        issuer:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    User:
      type: object
      properties:
        id:
          type: string
        origin:
          type: string
        provider:
          type: string
        domain:
          type: string
        createdTimestamp:
          $ref: '#/components/schemas/OffsetDateTime'
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    UserResetPasswordRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          format: password
          minLength: 1
    ProblemDetailResponse:
      type: object
      properties:
        errorCode:
          type: string
        detail:
          type: string
        params:
          type: array
          items:
            $ref: '#/components/schemas/ProblemDetailParam'
        invalidParams:
          type: array
          items:
            $ref: '#/components/schemas/ProblemDetailInvalidParam'
    RoleSearchCriteria:
      type: object
      required:
        - issuer
      properties:
        name:
          type: string
        issuer:
          type: string
        pageNumber:
          format: int32
          description: The number of page.
          default: 0
          type: integer
        pageSize:
          format: int32
          description: The size of page
          default: 100
          maximum: 1000
          type: integer
    RolePageResult:
      type: object
      properties:
        totalElements:
          format: int64
          description: The total elements in the resource.
          type: integer
        number:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        totalPages:
          format: int64
          type: integer
        stream:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Role:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    ProblemDetailParam:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    ProblemDetailInvalidParam:
      type: object
      properties:
        name:
          type: string
        message:
          type: string
    OffsetDateTime:
      format: date-time
      type: string
      example: 2022-03-10T12:15:50-04:00